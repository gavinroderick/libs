syntax = "proto3";

package io.restorecommerce.policy;

import "io/restorecommerce/resource_base.proto";
import "io/restorecommerce/meta.proto";
import "io/restorecommerce/rule.proto";
import "io/restorecommerce/auth.proto";
import "io/restorecommerce/status.proto";
import "io/restorecommerce/options.proto";

/**
* A Policy is defined by a set of Rules.
*/
message Policy {
  optional string id = 1;
  optional io.restorecommerce.meta.Meta meta = 2;
  optional string name = 3;
  optional string description = 4;
  repeated string rules = 5;  // rule IDs
  optional io.restorecommerce.rule.Target target = 6;  // general policy target
  optional io.restorecommerce.rule.Effect effect = 7;
  optional string combining_algorithm = 8;
  optional bool evaluation_cacheable = 9;
}

message PolicyRQ {
  optional string id = 1;
  optional io.restorecommerce.rule.Target target = 2;
  optional string combining_algorithm = 3;
  repeated io.restorecommerce.rule.RuleRQ rules = 4;
  optional io.restorecommerce.rule.Effect effect = 5;
  optional bool has_rules = 6;
  optional bool evaluation_cacheable = 7;
}

message PolicyList {
  repeated Policy items = 1;
  optional uint32 total_count = 2;
  io.restorecommerce.auth.Subject subject = 3;
}

message PolicyListResponse {
  repeated PolicyResponse items = 1;
  uint32 total_count = 2;
  io.restorecommerce.status.OperationStatus operation_status = 3;
}

message PolicyResponse {
  Policy payload = 1;
  io.restorecommerce.status.Status status = 2;
}

service Service {
  option (io.restorecommerce.options.service_name) = "policy";

  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (PolicyListResponse) {
    option (io.restorecommerce.options.is_query) = true;
  };
  rpc Create (PolicyList) returns (PolicyListResponse);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (io.restorecommerce.resourcebase.DeleteResponse);
  rpc Update (PolicyList) returns (PolicyListResponse);
  rpc Upsert (PolicyList) returns (PolicyListResponse);
}
