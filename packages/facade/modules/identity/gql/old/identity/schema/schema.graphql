# import B from "b.graphql"



type outputUsersType {
  """Details of the Users"""
  details: [UserType]

  """Error codes and messages"""
  error: ErrorArray
}

type UserType {
  """User ID"""
  id: String

  """User Name"""
  name: String
  first_name: String
  last_name: String

  """User Email adress"""
  email: String

  """Default Organization Scope for this User"""
  default_scope: String

  """User role associations"""
  role_associations: [RoleAssociation]

  """List of User roles"""
  role_associations_resolved: [RoleAssociationResolved]

  """User locale settings (default is "de-DE")"""
  locale_id: String

  """User locale settings (default is "de-DE")"""
  locale: LocaleType

  """User timezone"""
  timezone_id: String

  """User timezone"""
  timezone: TimezoneType

  """Guest user"""
  guest: Boolean

  """Image URL and other details"""
  image: ImageType

  """Meta info"""
  meta: Meta

  """User Activation status 1-Active, 0-Inactive"""
  active: Boolean

  """Activation code used to activate the User"""
  activation_code: String

  """True from time of registry until activation is complete"""
  unauthenticated: Boolean
}



type RootQuery {
  getAllUsers(limit: Int, offset: Int, filter: [FilterOptsInput], sort: SortOpts, scope: ScopeInputType, role_association: inputUserRole): outputUsersType
  # getAllRoles(limit: Int, offset: Int, filter: [FilterOptsInput], sort: SortOpts, scope: ScopeInputType): outputRoleType
  # getAllPolicySets(limit: Int, offset: Int, filter: [FilterOptsInput], sort: SortOpts, scope: ScopeInputType): outputPolicySetType
  # getAllPolicies(limit: Int, offset: Int, filter: [FilterOptsInput], sort: SortOpts, scope: ScopeInputType): outputPolicyType
  # getAllRules(limit: Int, offset: Int, filter: [FilterOptsInput], sort: SortOpts, scope: ScopeInputType): outputRuleType
  # getAllPermissions: outputPermissionsType
}

type Mutation {
  activateUser(input: activateUserInput!): activateUserPayload
  # changeUserPass(input: changePasswordInput!): changePasswordPayload
  # confirmPasswordChange(input: confirmPasswordChangeInput!): confirmPasswordChangePayload
  # createPolicies(input: createPoliciesInput!): createPoliciesPayload
  # createPolicySets(input: createPolicySetsInput!): createPolicySetsPayload
  # createProducts(input: createProductsInput!): createProductsPayload
  # createRoles(input: createRolesInput!): createRolesPayload
  # createRules(input: createRulesInput!): createRulesPayload
  # createUsers(input: createUsersInput!): createUsersPayload
  # deleteUsers(input: deleteUsersInput!): deleteUsersPayload
  # registerUser(input: RegisterUserInput!): RegisterUserPayload
  # requestEmailChange(input: requestEmailChangeInput!): requestEmailChangePayload
  # confirmEmailChange(input: confirmEmailChangeInput!): confirmEmailChangePayload
  # unregisterUser(input: unregisterUserInput!): unregisterUserPayload
  # signInUser(input: signInUserInput!): signInUserPayload
  # signInApiKey(input: signInApiKeyInput!): signInApiKeyPayload
  # logoutUser(input: logoutUserInput!): logoutUserPayload
  # activateUsers(input: activateUsersInput!): activateUsersPayload
  # updateUsers(input: updateUsersInput!): updateUsersPayload
  # updatePolicies(input: updatePoliciesInput!): updatePoliciesPayload
  # updatePolicySets(input: updatePolicySetsInput!): updatePolicySetsPayload
  # updateRoles(input: updateRolesInput!): updateRolesPayload
  # updateRules(input: updateRulesInput!): updateRulesPayload
  # requestPasswordChange(input: requestPasswordChangeInput!): requestPasswordChangePayload
}




schema {
  query: RootQuery
  mutation: Mutation
}


